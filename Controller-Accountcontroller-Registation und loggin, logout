using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeManagement_000.Model;
using EmployeeManagement_000.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

// For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace EmployeeManagement_000.controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<ApplicationUser> userManager;
        private readonly SignInManager<ApplicationUser> signInManager;

        public AccountController(UserManager<ApplicationUser> userManager,
                                                    SignInManager<ApplicationUser> signInManager)
        {
            this.userManager = userManager;
            this.signInManager = signInManager;
        }
        //--Post-Method-Logut---//
        [HttpPost]
        public async Task<IActionResult> Logout()
        {
          await  signInManager.SignOutAsync();
            return RedirectToAction("index", "home");
        }
        //-----Register----//
        //--Get-Method-Logout--//
        [HttpGet]
        [AllowAnonymous]
        public IActionResult Register()
        {
            return View();
        }

        //--Get Method--//
        [AcceptVerbs("Get", "Post")]
        [AllowAnonymous]
        public async Task<IActionResult> IsEmailInUse(string email)
        {
            var user = await userManager.FindByEmailAsync(email);
            if (user == null)
            {
                return Json(true);
            }else
            {
                return Json($"Email{ email} already used");
           }
        }

        //--Register Post Method--//
        [HttpPost]
        [AllowAnonymous]
        public async Task< IActionResult>Register(RegisterViewModel model) 
        {
            if (ModelState.IsValid)
            {       
                var user = new ApplicationUser
                { UserName = model.Email,
                  Email = model.Email,
                  City = model.City
                };
                var result = await userManager.CreateAsync(user, model.Password);
                if (result.Succeeded)
                {
                    if (signInManager.IsSignedIn(User) && User.IsInRole("Admin"))
                    {
                        return RedirectToAction("ListUsers", "Administration");
                    }
                    await signInManager.SignInAsync(user, isPersistent: false);
                    return RedirectToAction("index","home"  );
                }
                foreach(var error in result.Errors)
                {
                    ModelState.AddModelError(" ", error.Description);      
                }
            }
                return View(model);
        }
        //--Login--//
        //--GET-Method--//
        [HttpGet]
        [AllowAnonymous]
        public IActionResult Login()
        {
            return View();
        }

        //--Post Method---//
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> Login(LoginViewModel model, string returnUrl)
        {
            if (ModelState.IsValid)
            {
                var result = await signInManager. PasswordSignInAsync(model.Email,  model.Password, model.RememberMe, false);

                if (result.Succeeded)
                {
                    if(!string .IsNullOrEmpty(returnUrl)&& Url.IsLocalUrl(returnUrl))
                    {
                        return Redirect(returnUrl);
                    }else
                    {
                        return RedirectToAction("index", "home");
                    }
                   
                }
                    ModelState.AddModelError(string.Empty, "Invalied Login Attempt");
            }
            return View(model);
        }
       
    }
}
