File:Programm
---------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace Asp.net_prject_02
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>();
    }
}


file:startup
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Asp.net_prject_02.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace Asp.net_prject_02
{
    public class Startup
    {
        private IConfiguration _config;

        public Startup (IConfiguration config )
        {
            _config = config;
        }


        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
            services.AddSingleton<IEmployee, ModelEmployee>();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            } 
            
            app.UseStaticFiles();
            app.UseMvcWithDefaultRoute();
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
}

File:Model/Employee
-------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Asp.net_prject_02.Models
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Department{get;set;}
    }
}

File:Model IEployee
-------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Asp.net_prject_02.Models
{
  public interface IEmployee
    {
        Employee GetEmployee(int Id);
        IEnumerable<Employee> GetEmployee();
        object GetAllEmployee();
    }
}

File.Model/ModelEmployee
-------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Asp.net_prject_02.Models
{
    public class ModelEmployee : IEmployee
    {
        private List<Employee> _employeesList;

        public ModelEmployee()
        {
            _employeesList = new List<Employee>()
            {
                new Employee(){Id =1, Name ="Mary",Email="Mary@gmail.com",Department="HR"},
                new Employee(){Id =2, Name ="john",Email="John@hotmail.com",Department="Finance"},
                new Employee(){Id =3, Name ="Sam",Email="Sam@yahoo.com",Department="IT"},
            };

        }
        public object GetAllEmployee()
        {
            return _employeesList;
        }

        public Employee GetEmployee(int Id)
        {
            return  _employeesList.FirstOrDefault(e=> e.Id==Id);
        }

        public IEnumerable<Employee> GetEmployee()
        {
            throw new NotImplementedException();
        }

    }
}

File:Controllers/ HomeController
-------------------------------------
using Asp.net_prject_02.Models;
using Asp.net_prject_02.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Asp.net_prject_02.Controllers
{
    public class HomeController : Controller
    {
        private readonly IEmployee  _Iemployee;

        public HomeController(IEmployee Iemployee)
        {
            _Iemployee = Iemployee;
        }
        public ViewResult Index() 
        {
            var model = _Iemployee.GetAllEmployee();
            return View(model);
        }


        public ViewResult Details()
        {
            HomeDetailsViewModel homeDetailsViewModel = new HomeDetailsViewModel()
             {
                  Employee  = _Iemployee.GetEmployee(1),
                  PageTitle = "Employee Details" 
              };
         return View(homeDetailsViewModel);
     
        }
    }
}

File:Views:Home/Index.htmlcs
----------------------------
@model IEnumerable<Asp.net_prject_02.Models.Employee>
@{ 
    //Die zeile  blockiert wegen the _viewstartLauout
    //Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Employee";
}


   
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Department</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in Model)
                {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.Name</td>
                    <td>@employee.Department</td>
                </tr>
                }
            </tbody>foreach
        </table>

File:Views:Home/Details.htmlcs
----------------------------------
@model Asp.net_prject_02.ViewModels.HomeDetailsViewModel
@{
    //Die zeile  blockiert wegen the _viewstartLauout
    //Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Employee";
}

@*//Strongly type of models in views*@
<h3>@ViewBag.PageTitle</h3>

<div>
    Name: @Model.Employee.Name
</div>
<div>
    Email: @Model.Employee.Email
</div>
<div>
    Department : @Model.Employee.Department
</div>
@section Scripts {
<script src="~/js/CustomScript.js"></script>
}
@*// this  type of model in viewBag*@
@*<h3>@ViewBag.PageTitle</h3>

    <div>
        Name: @ViewBag.Employee.Name
    </div>
    <div>
        Email: @ViewBag.Employee.Email
    </div>
    <div>
        Department : @ViewBag.Employee.Department
    </div>*@

@*//thisi type of model View Data*@
@*<h1>@ViewData["PageTitle"]</h1>
    @{
        var employee = ViewData["Employee"] as Asp.net_prject_02.Models.Employee;
    }
    <div>
        Name: @employee.Name
    </div>
    <div>
        Email: @employee.Email
    </div>
    <div>
        Department: @employee.Department
    </div>*@

File:Views:Home/ViewStart.htmlcs
--------------------------------
@{
    Layout = "_Layout";
}

File:Views:shared/_Layout.htmlcs
----------------------------
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <div>
        @RenderBody()
    </div>
    @if (IsSectionDefined("Scripts"))
    {
        @RenderSection("Scripts", required: false)
    }


</body>
</html>

File:Views:shared/_Layout.htmlcs
------------------------------
@{
    Layout = "_Layout";
}






   

   
