  Programm
  ----------------
  using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace EmployeeManagement_01
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateWebHostBuilder(args).Build().Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
start up
--------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeManagement_01.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace EmployeeManagement_01
{
    public class Startup
    {
        private IConfiguration _config;

        public Startup(IConfiguration config)
        {
            _config = config;

        }
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().AddXmlSerializerFormatters();
            services.AddSingleton<IEmployee, ModelEmployee>();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseStaticFiles();
            app.UseMvcWithDefaultRoute();
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------
controller/Homecontroller
---------------------------
using EmployeeManagement_01.Models;
using EmployeeManagement_01.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_01.Controllers
{
    public class HomeController:Controller
    {
        private IEmployee _Iemployee;

        public HomeController(IEmployee Iemployee)
        {
            _Iemployee = Iemployee;
        }
        public ViewResult Index()
        {
             var model =  _Iemployee.GetAllEmployee();
            return View (model);

        }
        public ViewResult Details()
        {
            HomeDetailsviewModel homeDetailsviewModel = new HomeDetailsviewModel()
            {
                Employee = _Iemployee.GetEmployee(1),
                PageTitle = "EmployeeDetails!"
            };   
            return View(homeDetailsviewModel);

        }
    }
} 
-------------------------------------------------------------------------------------------------------------------------------
   
  
  Model/Employee
   ------------------
   using System;
    using System.Collections.Generic;
    Employeer
    ------------------------
    using System.Linq;
    
    using System.Threading.Tasks;

    namespace EmployeeManagement_01.Models
    {
        public class Employee
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public string Email { get; set; }
            public string Department { get; set; }
        }
    }
    ----------------------------------------------------------------------------------------------------------------------------------------
Interfaccce
------------------
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_01.Models
{
   public interface IEmployee
    {
        Employee GetEmployee(int Id);
        IEnumerable<Employee> GetAllEmployee();
    }
}
------------------------------------------------------------------------------------------------------------------------------------
modelEmployww
---------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_01.Models
{
    public class ModelEmployee:IEmployee
    {
        private List<Employee> _employeeList;

        public ModelEmployee()
        {
            _employeeList = new List<Employee>
            {
                new Employee(){Id=1,Name="Theepan", Email="theepan@gmail.com", Department="IT"},
                 new Employee(){Id=2,Name="mausha", Email="Samy@gmail.com", Department="Markt"},
                  new Employee(){Id=3,Name="Lutz", Email="Lusy@gmail.com", Department="HR"}
            };
        }

        public IEnumerable<Employee> GetAllEmployee()
        {
            return _employeeList;
        }

        public Employee GetEmployee(int Id)
        {
            return _employeeList.FirstOrDefault(e => e.Id == Id);
        }

        


    }
}
--------------------------------------------------------------------------------------------------------------------------------------
view/ home/Dettails
-----------------------
@model EmployeeManagement_01.ViewModels.HomeDetailsviewModel;
<html>
<head>
    <title>

    </title>
</head>
<body>
    <h1>@Model.PageTitle</h1>

    <div>
        Name :@Model.Employee.Name
    </div>
    <div>
        Name :@Model.Employee.Email
    </div>
    <div>
        Name :@Model.Employee.Department
    </div>
</body>
</html>
----------------------------------------------------------------------------------------------------------------------------
view/home/Index
-----------------
@model IEnumerable<EmployeeManagement_01.Models.Employee>
<html>
<head>
    <title>

    </title>
</head>
<body>
  <table>
<thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Email</th>
        <th>Department</th>
    </tr>
</thead>
      <tbody>
          @foreach( var employee  in Model)
          {
          <tr>
              <td>@employee.Id</td>
              <td>@employee.Name</td>
              <td>@employee.Email</td>
              <td>@employee.Department</td>

          </tr>  

          }
      </tbody>

  </table>
</body>
</html> 
--------------------------------------------------------------------------------------------------------------------------------------
viewmodels/hoomedetailsmodel view
--------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeManagement_01.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace EmployeeManagement_01
{
    public class Startup
    {
        private IConfiguration _config;

        public Startup(IConfiguration config)
        {
            _config = config;

        }
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc().AddXmlSerializerFormatters();
            services.AddSingleton<IEmployee, ModelEmployee>();

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            app.UseStaticFiles();
            app.UseMvcWithDefaultRoute();
            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
}

