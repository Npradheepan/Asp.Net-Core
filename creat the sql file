starup
---------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeManagement_000.Model;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace EmployeeManagement_000
{
    public class Startup
    {
        private IConfiguration _config;

        public Startup (IConfiguration config)
        {
            _config = config;
        }
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddDbContextPool<AppDbContext>(option => option.UseSqlServer(_config.GetConnectionString("EmployeeDBConnection")));

            services.AddMvc().AddXmlSerializerFormatters();
            services.AddScoped<IEmployeeRepository, SQLEmployeeRepository>();
        }
        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseStaticFiles();
            //app.UseMvcWithDefaultRoute();
           
            app.UseMvc(routes =>
            {
                routes.MapRoute("default", "{controller=Home}/{action=Index}/{id?}");
            });




        }
    }
}

HomeController
---------------
using EmployeeManagement_000.Model;
using EmployeeManagement_000.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_000.controllers
{
    public class HomeController : Controller
    {
        private readonly IEmployeeRepository _employeeRepository;

        public HomeController(IEmployeeRepository employeeRepository)
        {
            _employeeRepository = employeeRepository;
        }
        public ViewResult Index()
        {
            var model = _employeeRepository.GetAllEmployee();
            return View(model);
        }

        public ViewResult Details(int? id)
        {
            HomeDetailsViewModel homeDetailsViewModel = new HomeDetailsViewModel()
            {
                Employee = _employeeRepository.GetEmployee(id ?? 1),
                PageTitle = "Employee Details"
            };
            return View(homeDetailsViewModel);
        }
        [HttpGet]
        public ViewResult Create()
        {
            return View();
        }
        [HttpPost]
        public IActionResult Create(Employee employee)
        {
            if (ModelState.IsValid)
            {
                Employee newEmployee = _employeeRepository.Add(employee);
                //return RedirectToAction("details", new { id = newEmployee });
            }
            return View();
          
        }
    }
}
AppDbContext
-------------
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_000.Model
{
    public class AppDbContext:DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) 
            :base(options)
        {

        }
        public DbSet<Employee> Employees { get; set; }
    }
}

SQLEmployeeRepository
------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_000.Model
{
    public class SQLEmployeeRepository : IEmployeeRepository
    {
        private readonly  AppDbContext contex;

        public SQLEmployeeRepository(AppDbContext context)
        {
            this.contex  =  contex;
        }

        public Employee Add(Employee employee)
        {
            contex.Employees.Add(employee);
                contex.SaveChanges();
            return employee;
        }

        public Employee Delete(int id)
        {
            Employee employee = contex.Employees.Find(id);
            if(employee != null)
            {
                contex.Employees.Remove(employee);
                contex.SaveChanges();
            }
            return employee;
        }

        public IEnumerable<Employee> GetAllEmployee()
        {
            return contex.Employees;
        }

        public Employee GetEmployee(int Id)
        {
            return contex.Employees.Find(Id);
        }

        public Employee Update(Employee employeechanges)
        {
            var employee = contex.Employees.Attach(employeechanges);
            employee.State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            contex.SaveChanges();
            return employeechanges;
        }
    }
}
 ModelEmployeeRepository
 ----------------------------
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_000.Model
{
    public class ModelEmployeeRepository : IEmployeeRepository
    {
        private List<Employee> _employeeLsit;

        public ModelEmployeeRepository()
        {
            _employeeLsit =new List<Employee> ()
                {
                new Employee() { Id = 1, FirstName = "Theepan", LastName = "Navaradnarrajah", Email = "pradheepansri@gmail.com", TeleNo = 015152284743, Department = Dept.IT },
                new Employee() { Id = 2, FirstName = "Davor", LastName = "Gomisch", Email = "DV@kps.Kommunikation", TeleNo = 0187835465, Department = Dept.Management },
                new Employee() { Id = 3, FirstName = "Gristina", LastName = "Deutsch", Email = "GD@kps.Kommunikation", TeleNo = 0123356545, Department = Dept.HR }
                 };
        }

        public Employee Add(Employee employee)
        {
            employee.Id =_employeeLsit.Max(e => e.Id) + 1;
            _employeeLsit.Add(employee);
            return employee;
        }

        public Employee Delete(int id)
        {
            Employee employee=_employeeLsit.FirstOrDefault(e => e.Id == id);
            if (employee != null)
            {
                _employeeLsit.Remove(employee);
            }
            return employee;
        }

        public IEnumerable<Employee> GetAllEmployee()
        {
            return _employeeLsit;
        }

        public Employee GetEmployee(int Id)
        {
            return _employeeLsit.FirstOrDefault(e => e.Id == Id);
        }

        public Employee Update(Employee employeechanges)
        {
            Employee employee = _employeeLsit.FirstOrDefault(e => e.Id == employeechanges.Id);
            if (employee != null)
            {
                employee.FirstName = employeechanges.FirstName;
                employee.LastName= employeechanges.LastName;
                employee.Email = employeechanges.Email;
                employee.TeleNo = employeechanges.TeleNo;
                employee.Department = employeechanges.Department;
            }
            return employee;
        }
    }
}
IEmployeeRepository
----------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeManagement_000.Model
{
   public  interface IEmployeeRepository
    {
        Employee GetEmployee(int Id);
        IEnumerable<Employee>  GetAllEmployee();
        Employee Add(Employee employee);
        Employee Update(Employee employeechanges);
        Employee Delete(int id);
    }
}
